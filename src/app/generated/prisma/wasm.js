
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminUserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LanguageScalarFieldEnum = {
  code: 'code',
  name: 'name',
  isDefault: 'isDefault'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  imageUrl: 'imageUrl',
  eventDate: 'eventDate',
  eventEndDate: 'eventEndDate',
  location: 'location',
  address: 'address',
  capacity: 'capacity',
  spotsLeft: 'spotsLeft',
  price: 'price',
  priceMembers: 'priceMembers',
  pricePremium: 'pricePremium',
  eventType: 'eventType',
  isArchived: 'isArchived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.EventTranslationScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  languageCode: 'languageCode',
  title: 'title',
  description: 'description',
  longDescription: 'longDescription',
  requirements: 'requirements',
  additionalInfo: 'additionalInfo',
  instructorName: 'instructorName',
  instructorBio: 'instructorBio'
};

exports.Prisma.BlogPostScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  imageUrl: 'imageUrl',
  publishedAt: 'publishedAt',
  isPublished: 'isPublished',
  readTime: 'readTime',
  category: 'category',
  tags: 'tags',
  authorId: 'authorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isFeatured: 'isFeatured',
  isArchived: 'isArchived'
};

exports.Prisma.BlogPostTranslationScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  languageCode: 'languageCode',
  title: 'title',
  description: 'description',
  content: 'content',
  metaDescription: 'metaDescription',
  metaKeywords: 'metaKeywords'
};

exports.Prisma.ContactSubmissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  subject: 'subject',
  message: 'message',
  language: 'language',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.MembershipApplicationScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  membershipType: 'membershipType',
  experienceLevel: 'experienceLevel',
  interests: 'interests',
  comments: 'comments',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventRegistrationScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  isMember: 'isMember',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.WebsiteSettingScalarFieldEnum = {
  id: 'id',
  settingKey: 'settingKey',
  settingValue: 'settingValue',
  languageCode: 'languageCode',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogStatsScalarFieldEnum = {
  id: 'id',
  totalPosts: 'totalPosts',
  publishedPosts: 'publishedPosts',
  draftPosts: 'draftPosts',
  archivedPosts: 'archivedPosts',
  recentPosts: 'recentPosts',
  postsByCategory: 'postsByCategory',
  postsByMonth: 'postsByMonth',
  postsByAuthor: 'postsByAuthor',
  averageReadTime: 'averageReadTime',
  postTrend: 'postTrend',
  publishingRate: 'publishingRate',
  completionRate: 'completionRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventStatsScalarFieldEnum = {
  id: 'id',
  totalEvents: 'totalEvents',
  upcomingEvents: 'upcomingEvents',
  ongoingEvents: 'ongoingEvents',
  totalParticipants: 'totalParticipants',
  eventsByType: 'eventsByType',
  eventsByMonth: 'eventsByMonth',
  averageParticipants: 'averageParticipants',
  participationRate: 'participationRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberStatsScalarFieldEnum = {
  id: 'id',
  totalMembers: 'totalMembers',
  activeMembers: 'activeMembers',
  newMembers: 'newMembers',
  membershipTypes: 'membershipTypes',
  membersByType: 'membersByType',
  membersByMonth: 'membersByMonth',
  retentionRate: 'retentionRate',
  growthRate: 'growthRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageStatsScalarFieldEnum = {
  id: 'id',
  totalMessages: 'totalMessages',
  newMessages: 'newMessages',
  repliedMessages: 'repliedMessages',
  responseRate: 'responseRate',
  messagesByMonth: 'messagesByMonth',
  responseTrend: 'responseTrend',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserStatsScalarFieldEnum = {
  id: 'id',
  totalUsers: 'totalUsers',
  activeUsers: 'activeUsers',
  newUsers: 'newUsers',
  userRoles: 'userRoles',
  usersByMonth: 'usersByMonth',
  activityRate: 'activityRate',
  growthRate: 'growthRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  AdminUser: 'AdminUser',
  Language: 'Language',
  Event: 'Event',
  EventTranslation: 'EventTranslation',
  BlogPost: 'BlogPost',
  BlogPostTranslation: 'BlogPostTranslation',
  ContactSubmission: 'ContactSubmission',
  MembershipApplication: 'MembershipApplication',
  EventRegistration: 'EventRegistration',
  WebsiteSetting: 'WebsiteSetting',
  BlogStats: 'BlogStats',
  EventStats: 'EventStats',
  MemberStats: 'MemberStats',
  MessageStats: 'MessageStats',
  UserStats: 'UserStats'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
