generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id           String     @id @default(cuid())
  email        String     @unique
  passwordHash String
  name         String
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime   @default(now()) @db.Timestamptz(6)
  blogPosts    BlogPost[]
  events       Event[]
}

model Language {
  code                 String                @id
  name                 String
  isDefault            Boolean               @default(false)
  blogPostTranslations BlogPostTranslation[]
  eventTranslations    EventTranslation[]
  websiteSettings      WebsiteSetting[]
}

model Event {
  id            String              @id @default(cuid())
  slug          String              @unique
  imageUrl      String?
  eventDate     DateTime            @db.Timestamptz(6)
  eventEndDate  DateTime?           @db.Timestamptz(6)
  location      String?
  address       String?
  capacity      Int?
  spotsLeft     Int?
  price         Decimal?            @db.Decimal(10, 2)
  priceMembers  Decimal?            @db.Decimal(10, 2)
  pricePremium  Decimal?            @db.Decimal(10, 2)
  eventType     String
  isArchived    Boolean             @default(false)
  createdAt     DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime            @default(now()) @db.Timestamptz(6)
  createdById   String?
  createdBy     AdminUser?          @relation(fields: [createdById], references: [id])
  registrations EventRegistration[]
  translations  EventTranslation[]
  language      String?
  modifiedBy    String?
  gameType      String?
}

model EventTranslation {
  id              String   @id @default(cuid())
  eventId         String
  languageCode    String
  title           String
  description     String
  longDescription String?
  requirements    String?
  additionalInfo  String?
  instructorName  String?
  instructorBio   String?
  event           Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  language        Language @relation(fields: [languageCode], references: [code], onDelete: Cascade)

  @@unique([eventId, languageCode])
}

model Category {
  id            String     @id @default(cuid())
  slug          String     @unique
  nameEn        String
  nameFr        String
  createdAt     DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime   @updatedAt @db.Timestamptz(6)
  mainBlogPosts BlogPost[] @relation("MainCategory")
  subBlogPosts  BlogPost[] @relation("SubCategories")
}

model BlogPost {
  id             String                @id @default(cuid())
  slug           String                @unique
  imageUrl       String?
  publishedAt    DateTime?             @db.Timestamptz(6)
  isPublished    Boolean               @default(false)
  readTime       Int?
  mainCategoryId String? // Main category ID
  subCategoryIds String[] // Array of other category IDs
  tags           String[]
  authorId       String?
  createdAt      DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime              @updatedAt @db.Timestamptz(6)
  isFeatured     Boolean               @default(false)
  isArchived     Boolean               @default(false)
  author         AdminUser?            @relation(fields: [authorId], references: [id])
  translations   BlogPostTranslation[]
  mainCategory   Category?             @relation("MainCategory", fields: [mainCategoryId], references: [id])
  subCategories  Category[]            @relation("SubCategories")
}

model BlogPostTranslation {
  id              String   @id @default(cuid())
  blogPostId      String
  languageCode    String
  title           String
  description     String
  content         String
  metaDescription String?
  metaKeywords    String?
  blogPost        BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  language        Language @relation(fields: [languageCode], references: [code], onDelete: Cascade)

  @@unique([blogPostId, languageCode])
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  language  String   @default("en")
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

model MembershipApplication {
  id              String   @id @default(cuid())
  firstName       String
  lastName        String
  email           String
  phone           String?
  membershipType  String
  experienceLevel String?
  interests       String[]
  comments        String?
  status          String   @default("pending")
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @default(now()) @db.Timestamptz(6)
}

model EventRegistration {
  id        String   @id @default(cuid())
  eventId   String
  firstName String
  lastName  String
  email     String
  phone     String?
  isMember  Boolean  @default(false)
  status    String   @default("confirmed")
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model WebsiteSetting {
  id           String    @id @default(cuid())
  settingKey   String    @unique
  settingValue String?
  languageCode String?
  updatedAt    DateTime  @default(now()) @db.Timestamptz(6)
  language     Language? @relation(fields: [languageCode], references: [code])
}

model BlogStats {
  id              String   @id @default(cuid())
  totalPosts      Int      @default(0)
  publishedPosts  Int      @default(0)
  draftPosts      Int      @default(0)
  archivedPosts   Int      @default(0)
  recentPosts     Int      @default(0)
  postsByCategory Json     @default("[]")
  postsByMonth    Json     @default("[]")
  postsByAuthor   Json     @default("[]")
  averageReadTime Int      @default(0)
  postTrend       Float    @default(0)
  publishingRate  Float    @default(0)
  completionRate  Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model EventStats {
  id                  String   @id @default(cuid())
  totalEvents         Int      @default(0)
  upcomingEvents      Int      @default(0)
  ongoingEvents       Int      @default(0)
  totalParticipants   Int      @default(0)
  eventsByType        Json     @default("[]")
  eventsByMonth       Json     @default("[]")
  averageParticipants Int      @default(0)
  participationRate   Float    @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model MemberStats {
  id              String   @id @default(cuid())
  totalMembers    Int      @default(0)
  activeMembers   Int      @default(0)
  newMembers      Int      @default(0)
  membershipTypes Int      @default(0)
  membersByType   Json     @default("[]")
  membersByMonth  Json     @default("[]")
  retentionRate   Float    @default(0)
  growthRate      Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model MessageStats {
  id              String   @id @default(cuid())
  totalMessages   Int      @default(0)
  newMessages     Int      @default(0)
  repliedMessages Int      @default(0)
  responseRate    Float    @default(0)
  messagesByMonth Json     @default("[]")
  responseTrend   Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UserStats {
  id           String   @id @default(cuid())
  totalUsers   Int      @default(0)
  activeUsers  Int      @default(0)
  newUsers     Int      @default(0)
  userRoles    Int      @default(0)
  usersByMonth Json     @default("[]")
  activityRate Float    @default(0)
  growthRate   Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
